Login-----------------------------------------------------------------------------------------------

{
"token_type": "Bearer",
"expires_in": 31536000,
"access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjZlYzExNWY4YjAzMTY0NjU2NGM3ZDAxMTE3NGRiZmZmYjYyMDA2OWY1MDY0MGFiMmNjZGU5MjI3MTU0YmZiMDFhMzAxOWZkMDUyMTM5ZTA0In0.eyJhdWQiOiIyIiwianRpIjoiNmVjMTE1ZjhiMDMxNjQ2NTY0YzdkMDExMTc0ZGJmZmZiNjIwMDY5ZjUwNjQwYWIyY2NkZTkyMjcxNTRiZmIwMWEzMDE5ZmQwNTIxMzllMDQiLCJpYXQiOjE2Njk2MTY1NzgsIm5iZiI6MTY2OTYxNjU3OCwiZXhwIjoxNzAxMTUyNTc4LCJzdWIiOiIxNyIsInNjb3BlcyI6W119.T1OnjJeDGk9TRVAnRcJLn6-NsmUg2tqfCfW6QFzhElqkDOHzHHwVNb-1JAwGLmPPP9ax5jLqWQH6DAYzqjaP1JBlg1TPIodrVvUaUbdFoeMfc_zG-3phkfreWLycWrAbEE5GTBgejO3KnQsnVsOeIVwlV_fRMlIxY9VFW49bgJIj5q2cpaqovKAZC9yEKDcvjp5X1YO4RiPW7Zjjk92NQqjooYDjq5RZzbR6K5hI8fRjs0iYfQFb5TN103GOUcRaU9LG0UXTe-5hEsqTi10zqDOSN5AA0YxIOWz3htdsxZff8KzD9l8ExD4sMpkfgbgoeZG6WiGca25r6GykQmJXNC4ueGaRYHRB_IuXJxwI-BvFuNTmMjcANSZUX8IK_6G7wkOcCLrnUnfGF2WuNzkdPuXpvQVQNtKsvGI8WlzX1QrmTEt6S2FOKvhPXojQHQmpf8ix0U61u69-hiiHDEYZPPUZEbxH4tDQisnb1r_42BtapiVppvU3iGrEWy3RDt0mMkoZcFjXJZx5dNXFVgIO8bFVnZTIxs0gZO5DPqki2yTl5AtMLYTAlJfsOxSeaJjB5acR_9gTqeLXvkPUGe-qY0e5ndCkVGcWxhhb_XxyCrQqGKp7nOC7Eqlyg23tdgAGH_sih1Jt_TMN8PGiXaCzmcyG5ZimkAIn72BtoX06kPU",
"refresh_token": "def502007a7639b3caf6b3f1a3db77cb17d96db9933591105dc1ec511501c3a2c256acd283ba0ae551f8cd3ca36772012c8dc6c27d5c6053a4c43657b21308a47334925bada126dc827f2b4172c051778ad89a01ed76d930268c0f46010dd474d6bc31656c115eb0d74299d2b3deb74829c78e8f451cefa181239b1b615549b89232b5bc577b671a194e8afca0d7752989177d8259783e7f66ce8f0b09d8308477a23212589ec82201cc965347a79f58b20a54bc1fb45c2bd813da30a8737d87b0f41e2780b064394e15d3a4e315d6d0675e8ff4897edf2c74759c79c6558c06da8b2087fddffb7b7165833db1ed6d07cd08f5e6b87fc6c8ae9edb858e435ac3dbe2a061bcd3393d3cce41d0b6022c990079d2e88b844353d3b766af366bd203cd1e699594b402bb09686950fe432fe3fd6ca7cdca0f2363ff5a7677581f25bc2f519be2daf747b04ad8d897ebc47776f2300c48df51e5c1a339320b0469256095ce"
}

1- create model
این مدل را به طور خاص داخل خودش parse نکردیم

2- data source
خروجی ها را Future از نوع مدل auth تعریف میکنیم
متد api تا اینجا فقط get کار کرده بودیم
این دفعه post هست و بادی هم jsonObject هست

مدل را میسازیم

3- repository
چون دیتایی که از سمت سرور میاد به درد کابر نمیخوره و مورد استفاده خودمونه و سمت رابط کاربری ارسال نمیشه
پس خروجی ها را از نوع Future از نوع void تعریف میکنیم
چون کاربر که نمیخواد اکسس توکن رو ببینه

بعد از کال کردن api از طریق دیتا سورس مدل را اینجا دریافت میکنیم

آبجکت ریپازیتوری هم بالای همین فابل میسازیم

SignUp----------------------------------------------------------------------------------------------
1- data source
فانکشن sign up اینجوریه که بلافاصله بعد اومدن ریسپانسش باید فانکشن login را خودمون کال کنیم

2- repository
اینجا هم void برمیگرده اب همون استدلال قبلی

Refresh Token----------------------------------------------------------------------------------------
نکته خاصی نداره مثل قبلیاس

Shared Pref in flutter------------------------------------------------------------------------------
https://pub.dev/packages/shared_preferences/install

1- repository
توی ریپازیتوری یک متد مینویسیم برای ذخیره سازی توکن ها
_persistAuthTokens

بعد توی ریپازیتوری login & signup v هر جا توکن جدید میگیریم این فانکشن را صدا میزنیم

فانکشن قبلی پرایویت بود چون فقط توی همین ریپازیتوری استفاده میکردیم
یک فانکشن دیگه داریم برای چک کردن لاگین کاربر یعنی خواندن اطلاعات از shared pref
این یکی باید پابلیک باشه چون جاهای مختلفی قراره ازش استفاده کنیم loadAuthInfo

داخل ریپازیتوری یک instance میسازیم از ValueNotifier
چون معمولا توی اپلیکیشن ها اینجوریه که وقتی عمل لاگین را انجام میدین میخواین همه کسایی که نیاز دارن رفرش شن و ریبیلد شن
پس به یک ValueNotifier نیاز دارید که هنگتم تغییر کردن اطلاعات این رو به همه گزارش بده
استاتیکش هم میکنیم که نیاز به ساخت آبجکت برای دسترسی بهش نباشه
در کل شبیه لایو دیتاست

چوم اگر کاربر لاگین نکرده باشه مقدار null میشه پس  باید nullable تعریفش کنیم و مقدار پیش فرض null رو هم بهش میدیم

داخل تابع loadAuthInfo میایم این ValueNotifier را در صورت پر بودن setValue میکنیم

2- main
ما اطلاعات را داریم از یک فایلی میخونیم و ذخیره میکنیم دیگه.
این فایل shared Pref است.
در نتیجه زمانی که اپ داره استارت میشه و فانکشن main صدا زده میشه
اینجا باید اطلاعات را از فایل بخونیم و بریزیم توی رم
پس فانکشن loadAuthInfo را اینجا صدا میزنیم

ولی برای استفاده از sharedPref یک اروری میگیریم که binary messenger هنوز initilaized نشده
پس خط کد زیر را اضافه میکنیم
  WidgetsFlutterBinding.ensureInitialized();

3- bloc

4- AuthScreen
همه چیز را داخل ویجت blocProvider میذاریم
که بلاکمون تامین شه و از اینجا به بعد بتونیم با اکستنشن فانکشن روی کانتکس بهش دسترسی پیدا کنیم

بعد هم ویجت BlocBuilder برای کار با state ها

ولی نکته ای که داره اینه که مثلا وقتی state success داریم قرار نیست این صفحه ریبیلد شه
برای این کار bloc Builder یک فیلدی داره به اسم buildWhen
ورودیش یک فانکشن هست که دو تا پارامتر داره
این دو تا پارامتر این هستن که state قبلیت چی بوده و state فعلیت چیه
میخوایم با استفاده از این buildWhen بگیم فقط زمانی builder ما ریبیلد شه که
استیت فعلی برابر با لودینگ باشه یا initial یا error
این شرط را return میکنیم

کار دیگه ای میکنیم اضافه کردن این خط کد هست
بهش میگیم هر ایونتی که برات اتفاق افتاد و هر state ی که برات اومد
این فانکشن صدا زده میشه
برای نشون دادن اسنک بار و اینتن زدن
وقتایی که میخوایم به شکل ایونت نگاه کنیم به state ها به درد میخوره
     bloc.stream.forEach((state) {
                if (state is AuthSuccess) {
                  Navigator.of(context).pop();
                } else if (state is AuthError) {
                  ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text(state.exception.message)));
                }
              });

5- cart
چون میخوایم به اون value Notifier که توی sharedPref تعریف کردیم گوش کنیم
ValueListenableBuilder به عنوان روت از یک ویجتی استفاده میکنیم به اسم

 body: ValueListenableBuilder<AuthInfo?>(
   valueListenable: AuthRepository.authChangeNotifier,
   builder: (context, authState, child) {

 نکته آموزشی :
 وقتی rootNavigator را برابر با true قرار میدیم این صفحه روی همه چیز از جمله bottom nav قرار میگیره
   Navigator.of(context, rootNavigator: true).push(
                               MaterialPageRoute(
                                   builder: (context) => const AuthScreen()));
                         },